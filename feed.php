<?php
//CONSTANTS
	//Constants
	define("VULNSNEWERTHAN", "7"); //Only fetch vulnerabilities published in the last  x days

	//Global variables
	$max_date = new DateTime(date("Y-m-d")." + 1 day"); //Do not run into trouble depending on the time zone
	$min_date = new DateTime(date("Y-m-d")." - ".VULNSNEWERTHAN." days");
	$min_date->setTimezone(new DateTimeZone("UTC"));
	$max_date->setTimezone(new DateTimeZone("UTC"));
	$min_date = $min_date->format('Y-m-d');
	$max_date = $max_date->format('Y-m-d');

	//Remote paths
	define("NVDCVES", "https://services.nvd.nist.gov/rest/json/cves/2.0?noRejected&pubStartDate=".$min_date."T00:00:00.000&pubEndDate=".$max_date."T00:00:00.000"); //NVD CVE API

//MAIN
	$json_cves = completeFeed(NVDCVES);
	if ($json_cves === false) {
		displayError();
	} else {
		$filtered_cves = parseCVEs($json_cves);
		displayPageHeader();
		$array_cpes = groupCPE($filtered_cves);
		displayGrouped($array_cpes);
	}

//FUNCTIONS
	//Take the API URL and request the json feed
	function getFeed($url) {
		$response = @file_get_contents($url);
		if($response === FALSE) { //Feed error
			return false;
		}
		$response = json_decode($response, true);
		return $response;
	}

	//Download the entire feed for the given time frame
	function completeFeed($baseUrl) {
		$firstRun = true; //NVD api endpoint needs to be called a least once
		$more = false; //Set to true if the results are paged (resultsPerPage == 2000)
		$url = $baseUrl;
		$array_feed = array();
		while ($firstRun || $more) {
			$firstRun = false; //Firs run started
			$response = getFeed($url);
			if ($response === false) { //Error in the feed
				return false;
			}
			if(array_key_exists("vulnerabilities", $response)) {
				foreach ($response["vulnerabilities"] as $vuln) {
        	                	$array_feed[] = $vuln; //Push vulnerability to array
	                	}
			}
			if (array_key_exists("resultsPerPage", $response) && array_key_exists("totalResults", $response) && array_key_exists("startIndex", $response)) {
                        	$currentStartIndex = $response["startIndex"];
                        	$maxResults = $response["resultsPerPage"];
                        	$totalResults = $response["totalResults"];
                        	if (($currentStartIndex + $maxResults) < $totalResults) {
					$more = true; //More results to fetch
					$url = $baseUrl . "&startIndex=" . strval($currentStartIndex+$maxResults);
				} else {
					$more = false; //All results fetched
				}
			} else {
				$more = false; //All results fetched
			}
		}
		return $array_feed;
	}

	//Filter full feed array for relevant entries
	function parseCVEs($inputarray){
		$resultarray = array(); //New array for filtered results
		$counter = 0; //Index for filtered array

		foreach ($inputarray as $value) {
			$resultarray[$counter]["id"] = $value["cve"]["id"]; //Write CVE-ID to filtered array
			$resultarray[$counter]["date"] = str_replace("T", " ", substr($value["cve"]["published"],0,-1)); //Write published date to filtered array
			$resultarray[$counter]["description"] = $value["cve"]["descriptions"][0]["value"]; //Write English description to filtered array
			if(array_key_exists("cvssMetricV31", $value["cve"]["metrics"])) { //Get CVSSv3 information
				$resultarray[$counter]["score"] = $value["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["baseScore"]; //Write base score to filtered array
				$resultarray[$counter]["severity"] = $value["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["baseSeverity"]; //Write base severity to filtered array
				$resultarray[$counter]["vector"] = $value["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["vectorString"]; //Write vector string to filtered array
			} else {
				if(array_key_exists("cvssMetricV2", $value["cve"]["metrics"])) { //If no CVSSv3 information is available, get CVSSv2 information
					$resultarray[$counter]["score"] = $value["cve"]["metrics"]["cvssMetricV2"][0]["cvssData"]["baseScore"]; //Write base score to filtered array
					$resultarray[$counter]["severity"] = $value["cve"]["metrics"]["cvssMetricV2"][0]["cvssData"]["baseSeverity"]; //Write base severity to filtered array
					$resultarray[$counter]["vector"] = $value["cve"]["metrics"]["cvssMetricV2"][0]["cvssData"]["vectorString"]; //Write vector string to filtered array
				} else { //No CVSS information available at all
				$resultarray[$counter]["score"] = "NA";
				$resultarray[$counter]["severity"] = "NA";
				$resultarray[$counter]["vector"] = "NA";
				}
			}

			//Parse all CPE information given
			$stringoutput = "";
			if (array_key_exists("configurations", $value["cve"])) {
				foreach ($value["cve"]["configurations"] as $cpecapL1) {
					$stringoutput = $stringoutput . "(";
					foreach ($cpecapL1["nodes"] as $cpecapL2) {
						$stringoutput = $stringoutput . "(";
						foreach ($cpecapL2["cpeMatch"] as $cpecapL3) {
							if(array_key_exists("vulnerable", $cpecapL3) && array_key_exists("criteria", $cpecapL3) && $cpecapL3["vulnerable"] == true) {
								if(array_key_exists("negate", $cpecapL3) && $cpecapL3["negate"] == true) {
									$stringoutput = $stringoutput .  "NOT ";
								}
								$stringoutput = $stringoutput . $cpecapL3["criteria"];
								if(array_key_exists("operator", $cpecapL2) && $cpecapL2["operator"] == "AND") {
									$stringoutput = $stringoutput . " && ";
				                        	} else {
                                                        		$stringoutput = $stringoutput . " || ";
                                                		}
							} else {
								$stringoutput = $stringoutput . " || "; //Add operator to have a singular removal after the for loop
							}
						}
						$stringoutput = (strlen($stringoutput)>=4)?substr($stringoutput, 0, -4):$stringoutput; //Cut trailing || or &&
						$stringoutput = $stringoutput . ")";
						if(array_key_exists("operator", $cpecapL1) && $cpecapL1["operator"] == "AND") {
                                                	$stringoutput = $stringoutput . " && ";
                                        	} else {
                                                	$stringoutput = $stringoutput . " || ";
                                        	}
					}
					$stringoutput = (strlen($stringoutput)>=4)?substr($stringoutput, 0, -4):$stringoutput; //Cut trailing || or &&
					$stringoutput = (strlen($stringoutput)>=6 && substr($stringoutput, -6) == " && ()")?substr($stringoutput, 0, -6):$stringoutput; //If last cpe item was not vulnerable, remove section
					$stringoutput = $stringoutput . ")";
				}
				$resultarray[$counter]["cpe"] = $stringoutput; //Write CPE to filtered array
			}
			if($stringoutput == "" || $stringoutput == " " || $stringoutput == "()"){
				$resultarray[$counter]["cpe"] = "NA"; //Empty CPE
			}

			//Parse all references given
			$refs = "";
			foreach ($value["cve"]["references"] as $refitem) {
				//Iterate the reference items
				if(array_key_exists("url", $refitem)) {
					$refs = $refs . $refitem["url"] . "\n"; //Concartenate reference urls line by line
				}
			}
			$resultarray[$counter]["references"] = $refs; //Write references to filtered array
			$counter = $counter + 1; //Next relevant entry
		}
		return $resultarray; //Return array of relevant vulnerabilities
	}

	function groupCPE($inputarray) {
		$resultarray = array(); //New array for filtered results
		$workarray = $inputarray;
		$counter = 0;
		//Sort filtered array by cpe
		usort($workarray, function($a, $b) {
			if($a['cpe']==$b['cpe']) {
				return 0; //Same cpe
			} else {
				if($a['cpe'] < $b['cpe']) {
					return 1; //Reverse sort by cpe (prev < new)
				}
				return -1; //Reverse sort by cpe (prev > new)
			}
		}); //Sorted result is stored in work array

		$prevCPE = "";
		$ecount = -1;
		$icount = 0;
		foreach ($workarray as $value) {
			if($value["cpe"] != $prevCPE || $value["cpe"] == "NA") {
				$ecount = $ecount + 1;
				$icount = 0;
			}
			$prevCPE = $value["cpe"];
			$resultarray[$ecount]["cpe"] = $value["cpe"];
			$resultarray[$ecount]["id"][$icount] = $value["id"];
			$resultarray[$ecount]["date"][$icount] = $value["date"];
			$resultarray[$ecount]["score"][$icount] = $value["score"];
			$resultarray[$ecount]["severity"][$icount] = $value["severity"];
			$resultarray[$ecount]["vector"][$icount] = $value["vector"];
			$resultarray[$ecount]["description"][$icount] = $value["description"];
			$resultarray[$ecount]["references"][$icount] = $value["references"];
			$icount = $icount + 1;
		}

		return $resultarray;
	}

//DISPLAY
	//Static page header
	function displayPageHeader() {
		echo "<div class='hContainer'>";
			echo "<div class='bTable'>";
				echo "<div class='bRow'>";
					echo "<button id='udate' class='bCell bSort' type='button' onclick='sortBy(\"udate\")'>Date Up</button>";
					echo "<button id='ucve' class='bCell bSort' type='button' onclick='sortBy(\"ucve\")'>CVE Up</button>";
					echo "<button id='uscore' class='bCell bSort' type='button' onclick='sortBy(\"uscore\")'>Score Up</button>";
				echo "</div>";
				echo "<div class='bRow'>";
					echo "<button id='ddate' class='bCell bSort' type='button' onclick='sortBy(\"ddate\")'>Date Down</button>";
					echo "<button id='dcve' class='bCell bSort' type='button' onclick='sortBy(\"dcve\")'>CVE Down</button>"; 
					echo "<button id='dscore' class='bCell bSort' type='button' onclick='sortBy(\"dscore\")'>Score Down</button>";
				echo "</div>";
				echo "<div class='bRow'>";
					echo "<button id='chNA' class='bCell bServ' type='button' data-active='no' onclick='setCheck(\"chNA\")'>NA</button>";
					echo "<button id='chLOW' class='bCell bServ' type='button' data-active='no' onclick='setCheck(\"chLOW\")'>Low</button>"; 
					echo "<button id='chMEDIUM' class='bCell bServ' type='button' data-active='yes' onclick='setCheck(\"chMEDIUM\")'>Medium</button>";
				echo "</div>";
			echo "</div>";
			echo "<div class='reContainer'>";
				echo "<div class='lable'>Refresh (s) </div>";
				echo "<input type='text' class='refresh' id='iRefresh' onkeydown='search()' onfocus='stopRefresh()' onfocusout='setRefresh()' placeholder='Refresh every ...'>";
			echo "</div>";
			echo "<div class='timeContainer'>";
				echo "<div class='time'>Page Time: " . date("d.m.Y H:i:s") . "</div>"; //Display current time (page loaded)
			echo "</div>";
			echo "<input type='text' class='filter' id='iFilter' onkeyup='freeFilter()' onfocus='stopRefresh()' onfocusout='setRefresh()' placeholder='Search for text...'>";
		echo "</div>";
	}

	function displayGrouped($inputarray) {
		echo "<div id='cContainer'>";
		foreach ($inputarray as $value){
			//Parse and display every entry in filtered array
			$item = array();

			if(count($value["id"]) > 1){
				//Multiple cve for component
				$icount = 0;
				$item["id"] = ""; //Placeholder for cve id
				$item["description"] = ""; //Placeholder for multiple descriptions
				$item["cvestring"] = ""; //Placeholder for multiple CVE IDs
				$item["cpe"] = $value["cpe"]; //Set cpe
				if(array_key_exists("cve",$item) && item["cve"] != "NA" && item["cve"] != " "){
					$shortCPE = explode(":",$value["cpe"]); //Split cpe string
					$item["description"] = $shortCPE[3] . ", " . $shortCPE[4] ."\n Multiple Vulnerabilities:\n"; //Headline readable component description
				}
				//Initialize. Overwride by highest severity
				$item["score"] = 0;
				$item["severity"] ="LOW";
				$item["vector"] = $value["vector"][0];
				$item["references"] = "";

				//Initialize. Overwride by newest date
				$item["date"] = "0000-00-00 00:00";

				foreach($value["id"] as $invalue) {
					$item["description"] = $item["description"] . $value["id"][$icount] . " (" . $value["score"][$icount] . "): " . $value["description"][$icount] . "\n\n";
					if(floatval($value["score"][$icount]) > floatval($item["score"])) {
						//Update severity, base score, vector for summary item by most critical cve
						$item["score"] = $value["score"][$icount];
						$item["severity"] = $value["severity"][$icount];
						$item["vector"] = $value["vector"][$icount];
					}
					if(strcmp($value["date"][$icount], $item["date"]) > 0) {
						//Update date by newest published cve
						$item["date"] = $value["date"][$icount];
					}
					if(strcmp($value["id"][$icount], $item["id"]) > 0) {
						//Update id by highest cve id
						$item["id"] = $value["id"][$icount] . " (multiple)";
					}
					$item["references"] = $item["references"] . $value["references"][$icount]; //Summarize reference links for this component
					$icount = $icount + 1;
					$item["cvestring"] = $item["cvestring"] . $invalue . ","; //Build comma separated list of cves
				}

				//Remove last chars from string
				$item["description"] = substr($item["description"],0,-2);
				$item["cvestring"] = substr($item["cvestring"],0,-1);
			}
			else {
				//Single cve for component or cve not scored yet
				$item["id"] = $value["id"][0];
				$item["cvestring"] = $item["id"];
				$item["date"] = $value["date"][0];
				$item["severity"] = $value["severity"][0];
				$item["score"] = $value["score"][0];
				$item["vector"] = $value["vector"][0];
				if($value["cpe"] != "NA" && $value["cpe"] != " ") {
					$item["cpe"] = $value["cpe"];
					$shortCPE = explode(":",$value["cpe"]); //Split cpe string
					$item["description"] = $shortCPE[3] . ", " . $shortCPE[4] ."\n"; //Headline readable component description
				} else {
					//CVE not scored yet
					$item["cpe"] = "NA";
					$item["description"] = "";
				}

				$item["description"] = $item["description"] . $value["description"][0]; //Add description content
				$item["references"] = $value["references"][0]; //Add reference links
			}

			outputItem($item); //Display item
			unset($item); //Clear array
		}
		echo "</div>"; //Close content container
	}

	//Post each (grouped) vulnerability on page
	function outputItem($item) {
		$cveid = htmlspecialchars($item["id"], ENT_QUOTES);
		echo "<div class='tTable " . htmlspecialchars($item["severity"], ENT_QUOTES) . "' data-cve='" . htmlspecialchars($item["id"], ENT_QUOTES) . "' data-date='" . htmlspecialchars($item["date"], ENT_QUOTES) . "' data-score='" . htmlspecialchars($item["score"], ENT_QUOTES) . "' data-cvestring='" . htmlspecialchars($item["cvestring"], ENT_QUOTES) . "'>"; //Paragraph tagged by class name correlated with severity
			echo "<div class='tRow'><div class='tCell summary'>";
				echo "<div class='marker'>". htmlspecialchars($item["severity"], ENT_QUOTES) . " (" . htmlspecialchars($item["score"], ENT_QUOTES) . ")</div> " . htmlspecialchars($item["id"], ENT_QUOTES) . " (" . htmlspecialchars($item["date"], ENT_QUOTES) . ") <button type='button' class='detailbutton' onclick='displayAdditionals(this.parentNode.parentNode.parentNode)'>Details</button>"; //Summary line
			echo "</div></div>";
			echo "<div class='tRow'><div class='tCell vector'>";
				echo "Vector: " . htmlspecialchars($item["vector"], ENT_QUOTES); //Attack vector
			echo "</div></div>";
			echo "<div class='tRow'><div class='tCell description'>";
				echo nl2br(htmlspecialchars($item["description"], ENT_QUOTES)); //Vulnerability description
			echo "</div></div>";
			echo "<div class='tRow'><div class='tCell cpe' style='display: none'>";
				echo htmlspecialchars($item["cpe"], ENT_QUOTES); //CPE
			echo "</div></div>";
			echo "<div class='tRow'><div class='tCell references' style='display: none'>";
				echo nl2br (htmlspecialchars($item["references"], ENT_QUOTES)); //References
			echo "</div></div>";
		echo "</div>";
	}

	//Display error on file download failure
	function displayError() {
		echo "<div class='error'>Refresh the page and try again. Check error log for details.</div>";
	}
?>
