var defaultRefresh = 600; //Default refresh rate[>=0]
var activeButtonId = "ddate"; //Default active button [ddate, udate, dscore, uscore, dcve, ucve]

var refreshrate = defaultRefresh; //Initialize refresh rate
var timeout = ""; //Get ID for timeout function
var cActive = getComputedStyle(document.documentElement).getPropertyValue('--me-cActive');
var cPassive = getComputedStyle(document.documentElement).getPropertyValue('--me-cPassive');

function setRefresh () {
	var refreshValue = defaultRefresh; //Set default refresh rate
	refreshElement = document.getElementById('iRefresh');
	if (refreshElement == null) {
		//Refresh input does not exist. Could be error page. Set default
		refreshValue = defaultRefresh;
	} else {
		 refreshValue = document.getElementById('iRefresh').value; //Get input value
	}
	sessionStorage.setItem('refreshStr', refreshValue.toString(10)); //Store refresh interval for session
	refreshrate = parseInt(refreshValue); //Set refresh rate in effect
	stopRefresh();
	if(refreshrate > 0){
		//timeout= setTimeout(function () { location.reload(1); }, refreshrate*1000); //Set time out function for refresh
		timeout = setInterval(function(){doRefresh();},refreshrate*1000);
	}
}

function doRefresh() {
	container = $('#contentContainer');
	request_page = "../vuln/content.php";
	req = $.ajax({url:request_page,type:"GET",dataType:"HTML"});
	req.done(function(result) {
		container.html(result);
		initialize();
	});
}

function stopRefresh() {
	/*clearTimeout(timeout); //Stop refrshing*/
	clearInterval(timeout);
}

function search() {
    if(event.key === 'Enter') {
		//Enter was released on input element
        document.activeElement.blur(); //Clear focus
    }
}

function initialize() {
	//Load cached data in session storage (only works on page refresh)
	//Session storage does not work on local deployment. Page must be hosted on a web server
	var filterStr = "";
	var sortStr = "";
	var refreshStr = "";
	var chNAStr = "yes";
	var chLOWStr = "yes";
	var chMEDIUMStr = "yes";

	filterStr = sessionStorage.getItem('filterStr'); //Get former filter
	sortStr = sessionStorage.getItem('sortStr'); //Get former sort order
	refreshStr = sessionStorage.getItem('refreshStr'); //Get former refresh value
	chNAStr = sessionStorage.getItem('chNA'); //Get former checkbox status NA
	chLOWStr = sessionStorage.getItem('chLOW'); //Get former checkbox status LOW
	chMEDIUMStr = sessionStorage.getItem('chMEDIUM'); //Get former checkbox status MEDIUM

	if(filterStr != "" && filterStr != null) {
		//Filter in session storage found
		document.getElementById('iFilter').value = filterStr; //Set input text
	}
	if(refreshStr == "" || refreshStr == null) {
		//No refresh rate in session storage. Use Default value
		refreshStr = defaultRefresh;
	}
	refreshrate = parseInt(refreshStr); //Set refresh rate in effect
	document.getElementById('iRefresh').value = refreshrate.toString(10); //Set input text
	setRefresh(); //Call refresh changed function

	if(chNAStr=="no") {
		//NA default on
		document.getElementById("chNA").setAttribute('data-active', 'no');
	}
	else {
		document.getElementById("chNA").setAttribute('data-active', 'yes');
	}
	if(chLOWStr=="no") {
		//LOW default on
		document.getElementById("chLOW").setAttribute('data-active', 'no');
	}
	else {
		document.getElementById("chLOW").setAttribute('data-active', 'yes');
	}
	if(chMEDIUMStr=="no") {
		//MEDIUM default on
		document.getElementById("chMEDIUM").setAttribute('data-active', 'no');
	}
	else {
		document.getElementById("chMEDIUM").setAttribute('data-active', 'yes');
	}

	setChColor(); //Apply check color
	freeFilter(); //Apply filter
	sortBy(sortStr); //Apply sort order. Descending date if no value set
}

function freeFilter() {
	//Global var
	var filter; //Entered filter text
	var vulns; //Vulnerability items on page

	filter = document.getElementById('iFilter').value; //Get filter text
	vulns = document.getElementsByClassName('tTable'); //Get all vulnerability items on page

	sessionStorage.setItem('filterStr', filter); //Store filter for session

	for (var i = 0; i < vulns.length; i++) {
		//Iterate every vulnerability item
		var no; //Mark vulnerability item. 1 -> hide; 0 -> show
		no = 1; //1 -> hide; 0 -> show
		for (var c = 0; c < vulns[i].children.length; c++) {
			//iterate every div row withhin the vulnerability item
			var content; //Vulnerability content items
			var txt; //Store element text

			content = vulns[i].children[c].getElementsByClassName("tCell")[0]; //Get the content item within the div row
			txt = content.textContent || content.innerText; //Build content string
			if (txt.toLowerCase().indexOf(filter.toLowerCase()) > -1) {
				//Filter match found
				no = 0; //Mark vulnerability visible
				break; //Leave loop for the rows of this vulnerability item
			}
		}

		//Apply checkbox filter
		if (no == 0) {
			sumContent = vulns[i].getElementsByClassName("summary")[0]; //Get summary element of cve item
			sumTxt = sumContent.textContent || sumContent.innerText; //Build content string
			if ((sumTxt.indexOf("NA") > -1) && !(document.getElementById("chNA").getAttribute('data-active')=="yes")) {
				//NA not checked
				no = 1; //Set invisible
			}
			if ((sumTxt.indexOf("LOW") > -1) && !(document.getElementById("chLOW").getAttribute('data-active')=="yes")) {
				//LOW not checked
				no = 1; //Set invisible
			}
			if ((sumTxt.indexOf("MEDIUM") > -1) && !(document.getElementById("chMEDIUM").getAttribute('data-active')=="yes")) {
				//MEDIUM not checked
				no = 1; //Set invisible
			}
		}

		if (no == 0) {
			//Vulnerability item should be displayed
			vulns[i].style.display = ""; //Display vulnerability item
		} else {
			//Vulnerability item should be hidden
			vulns[i].style.display = "none"; //Hide vulnerability item
		}
	}
}

function sortBy(attribute) {
	//Sort vulnerability items by dataset attribute
	var vulns; //Vulnerability items on page
	var container; //div container

	vulns = document.getElementsByClassName('tTable'); //Get all vulnerability items on page
	container = document.getElementById("cContainer"); //Get the container element

	sessionStorage.setItem('sortStr', attribute); //Store sort order for session

	switch(attribute) {
		case "ucve": //Ascending by cve id
			var vulnarray = [].slice.call(vulns).sort(function (a, b) {
				return a.dataset.cve >= b.dataset.cve ? 1 : -1;
			});
			vulnarray.forEach(function (p) {
				container.appendChild(p);
			});
			break;
		case "uscore": //Ascending by cvssv3 base score
			var vulnarray = [].slice.call(vulns).sort(function (a, b) {
				if(a.dataset.score=="NA" && b.dataset.score!="NA") {
					//First value not scored -> b > a
					return -1;
				}
				if(b.dataset.score=="NA") {
					//Second value not scored -> b < a
					return 1;
				}
				if(parseFloat(a.dataset.score) > parseFloat(b.dataset.score)) {
					return 1;
				}
				if (parseFloat(a.dataset.score) < parseFloat(b.dataset.score)) {
					return -1;
				}
				//Same score. Sort by cve id
				return a.dataset.cve > b.dataset.cve ? 1 : -1;
			});
			vulnarray.forEach(function (p) {
				container.appendChild(p);
			});
			break;
		case "udate": //Ascending by date
			var vulnarray = [].slice.call(vulns).sort(function (a, b) {
				if(a.dataset.date > b.dataset.date) {
					return 1;
				}
				if (a.dataset.date < b.dataset.date) {
					return -1;
				}
				//Same date. Sort by cve id
				return a.dataset.cve > b.dataset.cve ? 1 : -1;
			});
			vulnarray.forEach(function (p) {
				container.appendChild(p);
			});
			break;
		case "dcve": //Descending by cve id
			var vulnarray = [].slice.call(vulns).sort(function (a, b) {
				return a.dataset.cve < b.dataset.cve ? 1 : -1;
			});
			vulnarray.forEach(function (p) {
				container.appendChild(p);
			});
			break;
		case "dscore": //Descending by cvssv3 base score
			var vulnarray = [].slice.call(vulns).sort(function (a, b) {
				if(a.dataset.score=="NA" && b.dataset.score!="NA") {
					//First value not scored -> b > a
					return 1;
				}
				if(b.dataset.score=="NA") {
					//Second value not scored -> b < a
					return -1;
				}
				if(parseFloat(a.dataset.score) > parseFloat(b.dataset.score)) {
					return -1;
				}
				if (parseFloat(a.dataset.score) < parseFloat(b.dataset.score)) {
					return 1;
				}
				//Same score. Sort by cve id
				return a.dataset.cve > b.dataset.cve ? -1 : 1;
			});
			vulnarray.forEach(function (p) {
				container.appendChild(p);
			});
			break;
		default: //Ascending by date
			attribute = "ddate";
			var vulnarray = [].slice.call(vulns).sort(function (a, b) {
				if(a.dataset.date > b.dataset.date) {
					return -1;
				}
				if (a.dataset.date < b.dataset.date) {
					return 1;
				}
				//Same date. Sort by cve id
				return a.dataset.cve > b.dataset.cve ? -1 : 1;
			});
			vulnarray.forEach(function (p) {
				container.appendChild(p);
			});
	}
	setButton(attribute);
}

function setButton(id) {
	//Set active button
	activeButtonId = id;
	//Manage button color
	var property = document.getElementById(id); //Get clicked button id
	var allButtons = document.getElementsByClassName("bSort"); //Get all buttons

	//Deactivate all buttons
	for (var c = 0; c < allButtons.length; c++) {
		allButtons[c].style.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--me-cPassive'); //Set background-color of all buttons
	}

	//Activate button
	property.style.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--me-cActive'); //Set background-color of active button
}

function setColorMode() {
	let root = document.documentElement;
	//Toggle color mode
	setButton(activeButtonId); //Set button color
	setChColor(); //Set check color
}

function setCheck(ch) {
	//Set color of check elements
	var toggle =  document.getElementById(ch);

	if (toggle.getAttribute('data-active') == "yes" && !toggle.disabled) {
		//Element was active. Deactivate
		toggle.setAttribute('data-active', 'no');
		sessionStorage.setItem(ch, "no");
	} else {
		//Element was inactive. Activate
		toggle.setAttribute('data-active', 'yes');
		sessionStorage.setItem(ch, "yes");
	}
	setChColor(); //Set check color
	freeFilter(); //Apply filter
}

function setChColor() {
	//Set check color
	var allButtons = document.getElementsByClassName("bServ"); //Get all buttons
	for (var c = 0; c < allButtons.length; c++) {
		if(allButtons[c].getAttribute('data-active') == "yes") {
			allButtons[c].style.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--me-cActive'); //Set background-color
		} else {
			allButtons[c].style.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--me-cPassive'); //Set background-color
		}
	}
}

function displayAdditionals (table) {
	//Display additional information on demand
	if(table.getElementsByClassName("cpe")[0].style.display == "none") {
		//Show additional information
		table.getElementsByClassName("cpe")[0].style.display="inline-block";
		table.getElementsByClassName("references")[0].style.display="inline-block";
		stopRefresh(); //Stop refresh
	} else {
		//Hide additional information
		table.getElementsByClassName("cpe")[0].style.display="none";
		table.getElementsByClassName("references")[0].style.display="none";

		var allCPE = document.getElementsByClassName("cpe");
		for (var c = 0; c < allCPE.length; c++) {
			if(allCPE[c].style.display=="inline-block") {
				//There are elements showing additional information
				return;
			}
		}
		//Only reached, if all cpe items are hidden
		setRefresh (); //Continue refresh timer
	}
}
